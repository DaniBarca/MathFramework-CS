// Generated by CoffeeScript 1.7.1
(function() {
  var Matrix33, SQMatrix,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SQMatrix = (function() {
    SQMatrix.prototype.size = 0;

    SQMatrix.prototype.m = [];

    SQMatrix.prototype.rows = 0;

    SQMatrix.prototype.cols = 0;

    function SQMatrix(n) {
      var cols, rows, size;
      size = n * n;
      rows = n;
      cols = n;
      clear();
    }

    SQMatrix.prototype.clear = function() {
      var i, _i;
      for (i = _i = 0; _i <= size; i = _i += 1) {
        m[i] = 0;
      }
    };

    SQMatrix.prototype.clone = function(mb) {
      var cols, m, rows, size;
      size = mb.size;
      rows = mb.rows;
      cols = mb.cols;
      m = mb.getArr();
    };

    SQMatrix.prototype.setIdentity = function() {
      var c, r, _i, _j;
      clear();
      for (r = _i = 0; _i <= rows; r = _i += 1) {
        for (c = _j = 0; _j <= cols; c = _j += 1) {
          set(r, c, 1);
        }
      }
    };

    SQMatrix.prototype.get = function(r, c) {
      return m[r * cols + c];
    };

    SQMatrix.prototype.set = function(r, c, v) {
      m[r * cols + c] = v;
    };

    SQMatrix.prototype.getArr = function() {
      return m;
    };

    SQMatrix.prototype.traspose = function() {
      var c, mb, r, _i, _j;
      mb = new SQMatrix(1);
      mb.clone(this);
      for (r = _i = 0; _i <= rows; r = _i += 1) {
        for (c = _j = 0; _j <= cols; c = _j += 1) {
          set(c, r, mb.get(r, c));
        }
      }
    };

    SQMatrix.prototype.mult = function(mb) {
      var c, r, res, t, temp, _i, _j, _k;
      res = new SQMatrix(rows);
      temp;
      for (r = _i = 0; _i <= rows; r = _i += 1) {
        for (c = _j = 0; _j <= cols; c = _j += 1) {
          temp = 0;
          for (t = _k = 0; _k <= cols; t = _k += 1) {
            temp = get(r, t) * get(t, c);
          }
          res.set(r, c, temp);
        }
      }
      return res;
    };

    return SQMatrix;

  })();

  Matrix33 = (function(_super) {
    __extends(Matrix33, _super);

    function Matrix33() {
      var cols, m, rows, size;
      size = 9;
      m = new Array(9);
      cols = 3;
      rows = 3;
      clear();
    }


    /*
    This method erases previous data in Matrix
    radians: rotation angle in rads
    axis:    3 position Array with 1,0 values where:
    axis[0] => x
    axis[1] => y
    axis[2] => z
     */

    Matrix33.prototype.setRotationMatrix = function(radians, axis) {
      var aux, cosr, sinr;
      sinr = Math.sin(radians);
      cosr = Math.cos(radians);
      aux = new Matrix33();
      if (axis[0] === 1) {
        aux.setIdentity();
        aux.set(1, 1, cosr);
        aux.set(1, 2, -sinr);
        aux.set(2, 1, sinr);
        aux.set(2, 2, cosr);
        clone(mult(aux));
      }
      if (axis[1] === 1) {
        aux.setIdentity();
        aux.set(0, 0, cosr);
        aux.set(0, 2, sinr);
        aux.set(2, 0, -sinr);
        aux.set(2, 2, cosr);
        clone(mult(aux));
      }
      if (axis[2] === 1) {
        aux.setIdentity();
        aux.set(0, 0, cosr);
        aux.set(0, 1, -sinr);
        aux.set(1, 0, sinr);
        aux.set(1, 1, cosr);
        clone(mult(aux));
      }
    };

    Matrix33.prototype.setRotation = function(radians, axis) {
      var rm, x, y;
      rm = new Matrix33();
      rm.setRotationMatrix(radians, axis);
      x = m[2];
      y = m[5];
      setIdentity();
      clone(mult(rm));
      m[2] = x;
      m[5] = x;
    };

    Matrix33.prototype.rotate = function(radians, axis) {
      var rm;
      rm = new Matrix33();
      rm.setRotationMatrix(radians, axis);
      clone(mult(rm));
    };


    /*
    For a local rotation:
    1: Put the Matrix at 0,0 coordinates
    2: Rotate the matrix normally
    3: Reset previous position
     */

    Matrix33.prototype.rotateLocal = function(radians, axis) {
      var x, y;
      x = m[2];
      y = m[5];
      setPosition(0, 0);
      rotate(radians, axis);
      setPosition(x, y);
    };

    Matrix33.prototype.setTranslationMatrix = function(x, y) {
      setIdentity();
      setPosition(x, y);
    };

    Matrix33.prototype.setPosition = function(x, y) {
      m[2] = x;
      m[5] = y;
    };


    /*
    Be sure to understand the difference between translate and translateLocal
    before touching anything. It's important.
     */

    Matrix33.prototype.translateLocal = function(x, y) {
      var t;
      t = new Matrix33();
      t.setTranslationMatrix(x, y);
      clone(mult(t));
    };

    Matrix33.prototype.translate = function(x, y) {
      m[2] += x;
      m[5] += y;
    };

    return Matrix33;

  })(SQMatrix);

}).call(this);


//# sourceMappingURL=Matrix.map
